<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MW</name>
    </assembly>
    <members>
        <member name="T:MW.Audio.MAudio">
            <summary>The Audio controller for in-game sounds.</summary>
        </member>
        <member name="P:MW.Audio.MAudio.AudioInstance">
            <summary>A unique reference to the only Audio object in the scene.</summary>
        </member>
        <member name="F:MW.Audio.MAudio.bMuteAllByDefault">
            <summary>Whether or not to mute every sound by default.</summary>
        </member>
        <member name="F:MW.Audio.MAudio.SSounds">
            <summary>Every sound that this Audio object will control.</summary>
        </member>
        <member name="M:MW.Audio.MAudio.Initialise(MW.Audio.MSound[])">
            <summary>Populates the Sounds array to match the settings.</summary>
        </member>
        <member name="M:MW.Audio.MAudio.Play(System.String,System.Boolean)">
            <summary>Plays sound of name n.</summary>
            <param name="sName">The name of the requested sound to play.</param>
            <param name="bOverlapSound"></param>
        </member>
        <member name="M:MW.Audio.MAudio.Stop(System.String)">
            <summary>Stops sound of name n.</summary>
            <param name="sName">The name of the requested sound to stop playing.</param>
        </member>
        <member name="M:MW.Audio.MAudio.StopAll">
            <summary>Stop every sound in the game.</summary>
        </member>
        <member name="M:MW.Audio.MAudio.Find(System.String)">
            <summary>Returns a sound in the Sounds array.</summary>
            <param name="n">The name of the requested sound.</param>
            <returns>The <see cref="T:MW.Audio.MSound"/> of the requested sound.</returns>
        </member>
        <member name="M:MW.Audio.MAudio.IsPlaying(System.String)">
            <summary>Whether or not sound of name n is playing.</summary>
            <param name="sName">The name of the sound to query.</param>
        </member>
        <member name="M:MW.Behaviour.MPlayer.Jump(System.Single)">
            <summary>Adds force upwards to this player. Default direction is MVector.Up.</summary>
            <remarks>Uses <see cref="M:UnityEngine.Rigidbody.AddForce(UnityEngine.Vector3)"/> to enforce jumping, by default.</remarks>
            <param name="Force">The amount of force to apply.</param>
        </member>
        <member name="F:MW.Behaviour.Player.OnTakeDamage">
            <summary>Called when damage is taken. First float is new <see cref="F:MW.Behaviour.Player.Health"/>, second is the inflicting damage.</summary>
        </member>
        <member name="P:MW.Behaviour.Player.Position">
            <summary>The world position of this player.</summary>
        </member>
        <member name="M:MW.Behaviour.Player.InitialisePlayer">
            <summary>Initialises this player's settings.</summary>
        </member>
        <member name="M:MW.Behaviour.Player.SetMovementSpeed(System.Single)">
            <summary>Sets MovementSpeed to NewMovementSpeed.</summary>
            <remarks>Also updates the default, <see cref="F:MW.Behaviour.Player.InitialMovementSpeed"/>. <see cref="M:MW.Behaviour.Player.TemporaryMovementSpeed(System.Single,System.Single)"/> will revert to NewMovementSpeed.</remarks>
            <param name="NewMovementSpeed">The new Movement Speed of this player.</param>
        </member>
        <member name="M:MW.Behaviour.Player.TemporaryMovementSpeed(System.Single,System.Single)">
            <summary>Temporarily modifies this player's MovementSpeed.</summary>
            <remarks>Calling StopCoroutine on the returned IEnumerator will not reset the player's MovementSpeed.</remarks>
            <param name="TemporaryMovementSpeed">The temporary MovementSpeed.</param>
            <param name="Duration">The time in seconds in which TemporaryMovementSpeed will be in effect.</param>
            <returns>The IEnumerator that handles timing.</returns>
        </member>
        <member name="M:MW.Behaviour.Player.ResetMovementSpeed">
            <summary>Set this player's <see cref="F:MW.Behaviour.Player.MovementSpeed"/> to <see cref="F:MW.Behaviour.Player.InitialMovementSpeed"/>.</summary>
        </member>
        <member name="M:MW.Behaviour.Player.MovementInput(System.Single,System.Single)">
            <summary>Registers movement from input.</summary>
            <remarks>Needs to be overidden from <see cref="T:MW.Behaviour.Player"/>.</remarks>
            <param name="ForwardThrow">Horizontal input.</param>
            <param name="RightThrow">Vertical input.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MW.Behaviour.Player.ReceiveMovementInput(System.Boolean)">
            <summary>Set this Player's ability to receive <see cref="M:MW.Behaviour.Player.MovementInput(System.Single,System.Single)"/>.</summary>
            <param name="bStopReceivingInput">True if this Player should stop receiving input.</param>
        </member>
        <member name="M:MW.Behaviour.Player.HasStoppedReceivingMovementInput">
            <summary>Whether or not this Player is allowed to receive <see cref="M:MW.Behaviour.Player.MovementInput(System.Single,System.Single)"/>.</summary>
            <returns>True if this Player is not allowed to receive <see cref="M:MW.Behaviour.Player.MovementInput(System.Single,System.Single)"/>.</returns>
        </member>
        <member name="M:MW.Behaviour.Player.GetHealth">
            <summary>Get this Player's Health.</summary>
            <returns>Current health.</returns>
        </member>
        <member name="M:MW.Behaviour.Player.TakeDamage(System.Single)">
            <summary>Deduct InDamage from this Player's Health.</summary>
            <param name="InDamage">The damage to inflict on this Player.</param>
            <returns>True if this Player <see cref="M:MW.Behaviour.Player.IsDead"/>.</returns>
        </member>
        <member name="M:MW.Behaviour.Player.TakeDamage(System.Single,System.Single@)">
            <inheritdoc cref="M:MW.Behaviour.Player.TakeDamage(System.Single)"/> <param name="InDamage"></param>
            <param name="HealthPercentageRemaining">The percentage of health remaining after taking InDamage.</param>
        </member>
        <member name="M:MW.Behaviour.Player.IsDead">
            <summary>If this Player's is considered dead.</summary>
            <returns>True if <see cref="M:MW.Behaviour.Player.GetHealth"/> &lt;= 0.</returns>
        </member>
        <member name="M:MW.Behaviour.Tick`1.#ctor(MW.EEquation,System.Single,System.Action{`0,System.Single})">
            <summary>Creates a new separate update loop.</summary>
            <param name="Equation">The <see cref="T:MW.EEquation"/> to use to Tick.</param>
            <param name="DurationInSeconds">The duration of this update loop in seconds.</param>
            <param name="OnTick">The method to call every tick. The executed T and interpolated Time is passed as a parameter.</param>
        </member>
        <member name="M:MW.Behaviour.Tick`1.#ctor(MW.EEquation,System.Single,System.Action{`0,System.Single},System.Single,System.Single)">
            <inheritdoc cref="M:MW.Behaviour.Tick`1.#ctor(MW.EEquation,System.Single,System.Action{`0,System.Single})"/>
            <param name="Equation"></param> <param name="DurationInSeconds"></param> <param name="OnTick"></param>
            <param name="StartInterpolation">Where to begin interpolation.</param>
            <param name="EndInterpolation">Where to end interpolation.</param>
        </member>
        <member name="M:MW.Behaviour.Tick`1.SetData(MW.MArray{`0})">
            <summary>Sets the data for the next execution of <see cref="F:MW.Behaviour.Tick`1.OnTick"/>.</summary>
            <remarks>All entries in <see cref="F:MW.Behaviour.Tick`1.Data"/> will be executed linearly.</remarks>
            <param name="Data">The data to set for the next <see cref="F:MW.Behaviour.Tick`1.OnTick"/>.</param>
        </member>
        <member name="M:MW.Behaviour.Tick`1.TogglePauseTick">
            <summary>Pauses this Tick from executing until this (<see cref="M:MW.Behaviour.Tick`1.TogglePauseTick"/>) is called again.</summary>
            <remarks>This is a toggle.</remarks>
        </member>
        <member name="M:MW.Behaviour.Tick`1.Terminate">
            <summary>Stop executing this Tick.</summary>
        </member>
        <member name="T:MW.Pathfinding.Pathfinding`1">
            <summary>Provides the A* Pathfinding implementation for T.</summary>
            <typeparam name="T">Generic type that implements INode and IHeapItem for T that defines a traversable waypoint.</typeparam>
        </member>
        <member name="M:MW.Pathfinding.Pathfinding`1.AStar(`0,`0,System.Collections.Generic.List{`0}@,System.UInt32,System.UInt32,System.Action{System.Collections.Generic.List{`0}},System.Action{System.Collections.Generic.List{`0}},System.Boolean)">
            <summary>A* pathfinds from Origin to Destination looking uDepth times within a uMapSize.</summary>
            <param name="Origin">T position to begin pathfinding.</param>
            <param name="Destination">T position to pathfind to.</param>
            <param name="Path">Reference T List of that make up the path from Origin to Destination.</param>
            <param name="uDepth">The depth to search to.</param>
            <param name="uMapSize">The total size of the map to be traversed. (The number of INodes).</param>
            <param name="OnPathFound">What to do when a path is found? Passes the reference successful Path as a parameter.</param>
            <param name="OnPathFailed">What to do when a path cannot be found? Passes the current state of the Path as a parameter.</param>
            <param name="bUseDiagnostics">Time the duration of Pathfinding?</param>
            <returns>Whether or not a path was found from Origin to Destination within uDepth in uMapSize.</returns>
        </member>
        <member name="T:MW.Pathfinding.PathRegister`1">
            <summary>Computes a number of paths over a number of frames.</summary>
            <typeparam name="T">Generic type that implements INode and IHeapItem for T that defines a traversable waypoint.</typeparam>
        </member>
        <member name="M:MW.Pathfinding.PathRegister`1.RequestPath(`0,`0,System.Action{System.Collections.Generic.List{`0}},System.Action{System.Collections.Generic.List{`0}})">
            <summary>Register a path to compute when possible.</summary>
            <remarks>This is on a first-in, first-out basis. A Queue.</remarks>
            <param name="Origin">T position to begin pathfinding.</param>
            <param name="Destination">T position to pathfind to.</param>
            <param name="OnPathCalculated">What to do when a path is found? List of T pathway.</param>
            <param name="OnPathFailed">What to do when a path cannot be found? List of T pathway attempt.</param>
        </member>
        <member name="M:MW.Pathfinding.PathRegister`1.ComputeNext">
            <summary>Computes the next path in FIFO.</summary>
            <returns>Whether or not a computation was executed.</returns>
        </member>
        <member name="M:MW.Pathfinding.PathRegister`1.ComputeBatch(System.UInt32)">
            <summary>Computes BatchSize paths in a single call.</summary>
            <param name="BatchSize">The number of paths to compute.</param>
        </member>
        <member name="M:MW.Pathfinding.PathRegister`1.GetPathQueueSize">
            <summary>Gets the number of agents waiting to compute paths.</summary>
            <returns>Unsigned integer number of T's awaiting a path.</returns>
        </member>
        <member name="T:MW.Pathfinding.MPathManager`1">
            <summary>The MonoBehavior script that manages pathfinding over frames.</summary>
            <typeparam name="T">Generic type that implements INode and IHeapItem for T that defines a traversable waypoint.</typeparam>
        </member>
        <member name="M:MW.Pathfinding.MPathManager`1.Pause">
            <summary>Halt the computation of paths.</summary>
        </member>
        <member name="M:MW.Pathfinding.MPathManager`1.Resume">
            <summary>Continue the computation of paths.</summary>
        </member>
        <member name="M:MW.Pathfinding.MPathManager`1.Status">
            <summary>Prints the current status of this Path Manager.</summary>
            <returns>If this Path Manager is currently Paused, or Running.</returns>
        </member>
        <member name="P:MW.Pathfinding.INode`1.F">
            <summary>This Node's F score.</summary>
        </member>
        <member name="P:MW.Pathfinding.INode`1.G">
            <summary>This Node's G score.</summary>
        </member>
        <member name="P:MW.Pathfinding.INode`1.H">
            <summary>This Node's H score.</summary>
        </member>
        <member name="P:MW.Pathfinding.INode`1.NumberOfDirections">
            <summary>How many directions can this Node point to?</summary>
        </member>
        <member name="M:MW.Pathfinding.INode`1.IsTraversable">
            <summary>Is this block traversable?</summary>
        </member>
        <member name="M:MW.Pathfinding.INode`1.Neighbour(System.UInt32)">
            <summary>Get the Neighbouring Node at uDirection.</summary>
            <param name="uDirection">The neighbour of this Node in this direction.</param>
        </member>
        <member name="M:MW.Pathfinding.INode`1.DistanceHeuristic(`0)">
            <summary>The distance heuristic to calculate pathfinding scores.</summary>
            <param name="RelativeTo">Distance to from this T to Relative To.</param>
            <returns>An indicative distance from this T, Relative To.</returns>
        </member>
        <member name="M:MW.CameraUtils.Orthographic.Raycast(UnityEngine.Camera)">
            <summary>Fires a ray from CCamera to mouse position.</summary>
            <returns><see cref="T:MW.CameraUtils.Orthographic.OrthographicRaycast"/></returns>
        </member>
        <member name="T:MW.CameraUtils.Orthographic.OrthographicRaycast">
            <summary>RaycastHit2D information about the Raycast.</summary>
        </member>
        <member name="F:MW.CameraUtils.Orthographic.OrthographicRaycast.raycast">
            <summary>The <see cref="T:UnityEngine.RaycastHit2D"/> information about the ray itself.</summary>
        </member>
        <member name="F:MW.CameraUtils.Orthographic.OrthographicRaycast.bHit">
            <summary>If <see cref="F:MW.CameraUtils.Orthographic.OrthographicRaycast.raycast"/> hit something.</summary>
        </member>
        <member name="F:MW.CameraUtils.Orthographic.PPlane">
            <summary>The Plane to pan a Camera for an Orthographic world.</summary>
        </member>
        <member name="M:MW.CameraUtils.Orthographic.Pan(UnityEngine.Camera,MW.EButton,System.Single)">
            <summary>Pan CCamera using BButtonToActivate by linearlly interpolating with fInterpolateSpeed.</summary>
            <param name="CCamera">The camera to pan.</param>
            <param name="BButtonToActivate">The mouse button to start activate panning.</param>
            <param name="fInterpolateSpeed">The speed to ease the camera's movement.</param>
        </member>
        <member name="M:MW.CameraUtils.Tracking.CameraFollow(UnityEngine.Camera,UnityEngine.Transform)">
            <summary>Have the camera follow target's transform.</summary>
            <param name="CCamera">The camera to move.</param>
            <param name="ATarget">The target's transform component.</param>
        </member>
        <member name="M:MW.CameraUtils.Tracking.CameraFollow(UnityEngine.Camera,UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>Have the camera to follow target's transform at an offset.</summary>
            <param name="CCamera">The camera to move.</param>
            <param name="ATarget">The target's transform component.</param>
            <param name="vOffset">The target's position at an offset.</param>
        </member>
        <member name="M:MW.CameraUtils.Tracking.CameraFollow(UnityEngine.Camera,UnityEngine.Vector3)">
            <summary>Have the camera follow target's position.</summary>
            <param name="CCamera">The camera to move.</param>
            <param name="vTarget">The target's position to follow.</param>
        </member>
        <member name="M:MW.CameraUtils.Tracking.CameraFollow(UnityEngine.Camera,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Have the camera follow target's position at an offset.</summary>
            <param name="CCamera">The camera to move.</param>
            <param name="vTarget">The target's position to follow.</param>
            <param name="vOffset">The target's position at an offset.</param>
        </member>
        <member name="M:MW.CameraUtils.Tracking.CameraFollow(UnityEngine.Transform)">
            <summary>Have the main camera follow target's transform.</summary>
        </member>
        <member name="M:MW.CameraUtils.Tracking.CameraFollow(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>Have the main camera follow target's transform at an offset.</summary>
            <param name="ATarget">The target's transform component.</param>
            <param name="vOffset">The target's position at an offset.</param>
        </member>
        <member name="M:MW.CameraUtils.Tracking.CameraFollow(UnityEngine.Vector3)">
            <summary>Have the main camera follow target's position.</summary>
        </member>
        <member name="M:MW.CameraUtils.Tracking.CameraFollow(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Have the main camera follow target's position at an offset.</summary>
            <param name="vTarget">The target's position.</param>
            <param name="vOffset">The target's position at an offset.</param>
        </member>
        <member name="M:MW.CameraUtils.Tracking.Billboard(UnityEngine.Transform)">
            <summary>Ensures the transform always faces the main camera.</summary>
            <param name="ASelf">The transform to look towards the main camera.</param>
        </member>
        <member name="M:MW.CameraUtils.Tracking.Billboard(UnityEngine.Transform,UnityEngine.Camera)">
            <summary>Ensures the transform always faces camera.</summary>
            <param name="ASelf">The transform to look towards the camera.</param>
            <param name="CCamera">The camera to look at.</param>
        </member>
        <member name="M:MW.CameraUtils.Tracking.Billboard(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>Ensures the transform always faces point.</summary>
            <param name="ASelf">The transform to look towards the point.</param>
            <param name="APoint">The transform of where self needs to look towards</param>
        </member>
        <member name="M:MW.CameraUtils.Tracking.Billboard(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>Ensures the transform always faces point.</summary>
            <param name="ASelf">The transform to look towards the point.</param>
            <param name="vPoint">The point in world coordinates.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(UnityEngine.Vector3)">
            <summary>The corresponding colour in RGA using Vector3.</summary>
            <param name="vColour">The RGB/XYZ channel values, respectively.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(System.Int32,System.Int32,System.Int32)">
            <summary>The corresponding colour from 0 - 255 in RGB.</summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(System.Single,System.Single,System.Single)">
            <summary>The corresponding colour from 0 - 255 in RGB.</summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(UnityEngine.Vector4)">
            <summary>The corresponding colour in RGBA using Vector4.</summary>
            <param name="v4Colour">The RGBA/XYZW channel values, respectivaly.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The corresponding colour from 0 - 255 in RGBA.</summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
            <param name="a">The alpha value.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(System.Single,System.Single,System.Single,System.Single)">
            <summary>The corresponding colour from 0 - 255 in RGBA.</summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
            <param name="a">The alpha value.</param>
        </member>
        <member name="M:MW.Conversion.Colour.ColourHex(System.String)">
            <summary>Converts a hexadecimal to its corresponding colour.</summary>
             <param name="sHex">The hexadecimal in the format: "#RRGGBB"; where '#' denotes a hexadecimal, 'RR' denotes the Red colour channel, 'GG' denotes the Green colour channel and 'BB' denotes the Blue colour channel.</param>
        </member>
        <member name="M:MW.Conversion.Colour.ColourHex(System.String,System.Single)">
            <summary>The corresponding hexadecimal and alpha colour.</summary>
            <param name="sHex">The hexadecimal in the format: "#RRGGBB"; where '#' denotes a hexadecimal, 'RR' denotes the Red colour channel, 'GG' denotes the Green colour channel and 'BB' denotes the Blue colour channel.</param>
            <param name="fAlpha">The float alpha.</param>
        </member>
        <member name="M:MW.Conversion.Colour.ColourHex(System.String,System.String)">
            <summary>The corresponding hexadecimal colour and hexadecimal alpha.</summary>
            <param name="sHex">The hexadecimal in the format: "#RRGGBB"; where '#' denotes a hexadecimal, 'RR' denotes the Red colour channel, 'GG' denotes the Green colour channel and 'BB' denotes the Blue colour channel.</param>
            <param name="sAlpha">The hexadecimal in the format: "#AA"; where '#' denotes a hexadecimal and 'AA' denotes the Alpha channel.</param>
        </member>
        <member name="T:MW.Diagnostics.EVerbosity">
            <summary>UnityEngine.Debug.Log<see cref="T:MW.Diagnostics.EVerbosity"/>().</summary>
        </member>
        <member name="M:MW.Diagnostics.Log.P(System.Object[])">
            <summary><see cref="M:UnityEngine.Debug.Log(System.Object)"/> every object with <see cref="M:System.Object.ToString"/>.</summary>
            <param name="debug">The list of <see cref="T:System.Object"/>s to log separated by a space.</param>
        </member>
        <member name="M:MW.Diagnostics.Log.E(System.Object[])">
            <summary><see cref="M:UnityEngine.Debug.LogError(System.Object)"/> every object with <see cref="M:System.Object.ToString"/>.</summary>
            <param name="debug">The list of <see cref="T:System.Object"/>s to log separated by a space.</param>
        </member>
        <member name="M:MW.Diagnostics.Log.W(System.Object[])">
            <summary><see cref="M:UnityEngine.Debug.LogWarning(System.Object)"/> every object with <see cref="M:System.Object.ToString"/>.</summary>
            <param name="debug">The list of <see cref="T:System.Object"/>s to log separated by a space.</param>
        </member>
        <member name="T:MW.Diagnostics.Stacktrace">
            <summary>Provides a stacktrace for code.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stacktrace.Here(MW.Diagnostics.EVerbosity)">
            <summary>Stacktrace using <see cref="M:MW.Diagnostics.Log.P(System.Object[])"/> with <see cref="T:MW.Diagnostics.EVerbosity"/> verbosity.</summary>
            <param name="verbosity">The <see cref="T:MW.Diagnostics.EVerbosity"/> verbosity of the <see cref="M:MW.Diagnostics.Log.P(System.Object[])"/>.</param>
        </member>
        <member name="M:MW.Diagnostics.Stacktrace.Here(System.String,MW.Diagnostics.EVerbosity)">
            <summary>Stacktrace using <see cref="M:MW.Diagnostics.Log.P(System.Object[])"/> with <see cref="T:MW.Diagnostics.EVerbosity"/> verbosity and a <see cref="T:System.String"/> message.</summary>
            <param name="sMessage">The <see cref="T:System.String"/> message to show.</param>
            <param name="verbosity">The <see cref="T:MW.Diagnostics.EVerbosity"/> of the <see cref="M:MW.Diagnostics.Log.P(System.Object[])"/>.</param>
        </member>
        <member name="T:MW.Diagnostics.Stopwatch">
            <summary>Track execution time of code.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.#ctor(System.Boolean)">
            <summary>Creates a new Stopwatch.</summary>
            <param name="bStartOnCreation">Immediately starting timing upon instantiating?</param>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.Start">
            <summary>Start Stopwatch.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.Stop">
            <summary>Stop Stopwatch and get the elapsed <see cref="M:MW.Diagnostics.Stopwatch.Time"/>.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.Restart">
            <summary>Restarts Stopwatch and get the <see cref="M:MW.Diagnostics.Stopwatch.Time"/> before restarting.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.Time">
            <summary>Get the current elapsed time.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.TimeInSeconds">
            <summary>Get the current elapsed time in seconds.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.ToSeconds(System.Int64)">
            <summary>Converts milliseconds to seconds.</summary>
            <param name="lMilliseconds">Milliseconds to convert.</param>
        </member>
        <member name="T:MW.Editor.ReadOnlyAttribute">
            <summary>Sets this property to be visible in the Unity Editor, but is not editable.</summary>
        </member>
        <member name="T:MW.EButton">
            <summary>The mouse buttons on a standard mouse.</summary>
        </member>
        <member name="T:MW.EDirection">
            <summary>Orientations for specific faces.</summary>
        </member>
        <member name="T:MW.EEquation">
            <summary>Interpolating equations.</summary>
        </member>
        <member name="T:MW.EUnit">
            <summary>Units of measurement of speed.</summary>
        </member>
        <member name="T:MW.IO.I">
            <summary>Mouse Input and Keyboard Input, based off of <see cref="T:UnityEngine.Input"/>.</summary>
        </member>
        <member name="M:MW.IO.I.Click(MW.EButton,System.Boolean,System.Boolean)">
            <param name="BMouse">The <see cref="T:MW.EButton"/> press to listen for.</param>
            <param name="bHold">Whether or not to check if this button is held down.</param>
            <param name="bUp">Whether or not to check if this button is released.</param>
            <returns>If the <see cref="T:MW.EButton"/> was clicked or held.</returns>
        </member>
        <member name="M:MW.IO.I.Key(UnityEngine.KeyCode,System.Boolean,System.Boolean)">
            <param name="KCStroke">The <see cref="T:UnityEngine.KeyCode"/> that was pressed on the keyboard.</param>
            <param name="bHold">Whether or not to check if this button is held down.</param>
            <param name="bUp">Whether or not to check if this button is released.</param>
            <returns>If Stroke was pressed or Held.</returns>
        </member>
        <member name="M:MW.IO.I.Any">
            <summary>Identical to <see cref="P:UnityEngine.Input.anyKey"/>.</summary>
            <returns>True if a key or a mouse button was pressed.</returns>
        </member>
        <member name="M:MW.IO.O.Out(System.Object[])">
            <summary>Identical to <see cref="M:MW.Diagnostics.Log.P(System.Object[])"/>.</summary>
            <param name="debug">The list of <see cref="T:System.Object"/>s to log separated by a space.</param>
        </member>
        <member name="M:MW.Kinetic.Aerodynamics.AirResistance(UnityEngine.Rigidbody)">
            <summary>The direction of natural air resistance.</summary>
            <param name="RSelf">The rigidbody to apply air resistance to.</param>
        </member>
        <member name="M:MW.Kinetic.Aerodynamics.Lift(System.Single,System.Single,System.Single,System.Single)">
            <summary>The scale of lift applied to a wing with fWingArea travelling at fVelocity through a fluid at fDensity with fLiftCoefficient.</summary>
            <param name="fLiftCoefficient">The heuristic coefficient for lift.</param>
            <param name="fDensity">The density of the fluid.</param>
            <param name="fVelocity">The speed at which the wing is travelling.</param>
            <param name="fWingArea">The area of the wing.</param>
        </member>
        <member name="F:MW.Kinetic.Kinematics.kVelocityRatio">
            <summary>Convert inspector speed to m/s.</summary>
        </member>
        <member name="M:MW.Kinetic.Kinematics.HasReached(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>If the distance between From and To is &lt;= Tolerance.</summary>
            <param name="From">The reference <see cref="T:UnityEngine.Vector3"/> to compare.</param>
            <param name="To">The target <see cref="T:UnityEngine.Vector3"/> to compare.</param>
            <param name="Tolerance">The range that is considered if From has 'reached' To.</param>
            <returns>True if the distance between From and To are &lt;= Tolerance.</returns>
        </member>
        <member name="M:MW.Kinetic.Kinematics.HomeTowards(UnityEngine.Rigidbody,UnityEngine.Transform,System.Single,System.Single)">
            <summary>Moves Rigidbody towards target while moving at velocity with a maximum turn angle of MaxDegreesDeltaPerFrame.</summary>
            <param name="Rigidbody">The <see cref="T:UnityEngine.Rigidbody"/> to move.</param>
            <param name="Target">The <see cref="T:UnityEngine.Transform"/> destination.</param>
            <param name="Velocity">The rate at which self moves towards target.</param>
            <param name="MaxDegreesDeltaPerFrame">The maximum degrees self can turn towards target per frame.</param>
        </member>
        <member name="M:MW.Kinetic.Kinematics.HomeTowards(UnityEngine.Rigidbody,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>Moves Rigidbody towards target while moving at velocity with a maximum turn angle of MaxDegreesDeltaPerFrame.</summary>
            <param name="Rigidbody">The <see cref="T:UnityEngine.Rigidbody"/> to move.</param>
            <param name="Target">The destination coordinates.</param>
            <param name="Velocity">The rate at which self moves towards target.</param>
            <param name="MaxDegreesDeltaPerFrame">The maximum degrees self can turn towards target per frame.</param>
        </member>
        <member name="M:MW.Kinetic.Kinematics.HomeTowards(UnityEngine.Rigidbody2D,UnityEngine.Transform,System.Single,System.Single)">
            <summary>Moves Rigidbody towards target while moving at velocity with a maximum turn angle of MaxDegreesDeltaPerFrame.</summary>
            <param name="Rigidbody">The <see cref="T:UnityEngine.Rigidbody2D"/> to move.</param>
            <param name="Target">The <see cref="T:UnityEngine.Transform"/> destination.</param>
            <param name="Velocity">The rate at which self moves towards target.</param>
            <param name="MaxDegreesDeltaPerFrame">The maximum degrees self can turn towards target per frame.</param>
        </member>
        <member name="M:MW.Kinetic.Kinematics.HomeTowards(UnityEngine.Rigidbody2D,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>Moves Rigidbody towards target while moving at velocity with a maximum turn angle of MaxDegreesDeltaPerFrame.</summary>
            <param name="Rigidbody">The <see cref="T:UnityEngine.Rigidbody2D"/> to move.</param>
            <param name="Target">The destination coordinates.</param>
            <param name="Velocity">The rate at which self moves towards target.</param>
            <param name="MaxDegreesDeltaPerFrame">The maximum degrees self can turn towards target per frame.</param>
        </member>
        <member name="M:MW.Kinetic.Miscellanous.CollisionAvoidance(UnityEngine.Transform,System.Single,System.Single,UnityEngine.LayerMask,System.Boolean)">
            <summary>The direction in which to avoid colliding with obstacles.</summary>
            <param name="ASelf">The transform wanting to avoid collisions.</param>
            <param name="fAngle">The angle to search for potential collisions.</param>
            <param name="fSearchDistance">The distance to search for collisions.</param>
            <param name="lmObstacles">The layer to avoid colliding with.</param>
            <param name="bDebug">[EDITOR ONLY] Draw lines of the collision avoidance search. Red is the closest collision. Blue is the moving forward direction.</param>
        </member>
        <member name="M:MW.Easing.Interpolate.GetEasingFunctionDerivative(MW.EEquation)">
            <summary>
            Gets the derivative function of the appropriate easing function. If you use an easing function for position then this
            function can get you the speed at a given time (normalised).
            </summary>
            <param name="Function"></param>
            <returns>The derivative function</returns>
        </member>
        <member name="M:MW.Math.Mathematics.Acceleration(MW.EEquation,System.Single,System.Single,System.Single)">
            <param name="EEquation">The <see cref="T:MW.EEquation"/> to use to accelerate.</param>
            <param name="fCurrentSpeed">The current speed of the acceleration.</param>
            <param name="fRateOfAcceleration">The rate to accelerate towards to terminal from current speed.</param>
            <param name="fTerminal">The maximum speed.</param>
            <returns>The acceleration value using <see cref="T:MW.EEquation"/>, using the current speed and rate of acceleration towards terminal over <see cref="P:UnityEngine.Time.deltaTime"/>.</returns>
        </member>
        <member name="M:MW.Math.Mathematics.AccelerationRate(UnityEngine.Rigidbody,System.Single)">
            <param name="RSelf">The <see cref="T:UnityEngine.Rigidbody"/> to calculate an acceleration rate.</param>
            <param name="fSpeed">The current speed of the <see cref="T:UnityEngine.Rigidbody"/> in <see cref="F:MW.EUnit.MetresPerSecond"/>.</param>
            <returns>The float rate of movement in <see cref="F:MW.EUnit.MetresPerSecond"/>.</returns>
        </member>
        <member name="M:MW.Math.Mathematics.Speed(UnityEngine.Rigidbody,MW.EUnit)">
            <param name="RSelf">The <see cref="T:UnityEngine.Rigidbody"/> to read a speed from.</param>
            <param name="UUnit">The desired <see cref="T:MW.EUnit"/> of measurement.</param>
            <returns>A speed reading from self in <see cref="T:MW.EUnit"/> of measurement.</returns>
        </member>
        <member name="M:MW.Math.Mathematics.PredictiveProjectile(UnityEngine.Rigidbody,UnityEngine.Rigidbody)">
            <summary>The direction to intercept RBTarget relative to RSelf.</summary>
            <param name="RSelf">The <see cref="T:UnityEngine.Rigidbody"/> predicting the movement of RBTarget.</param>
            <param name="RBTarget">The <see cref="T:UnityEngine.Rigidbody"/> to predict.</param>
        </member>
        <member name="M:MW.Math.Mathematics.IsPowerOfTwo(System.Int32)">
            <summary>Whether nNumber is a power of two.</summary>
            <param name="nNumber">The number to check.</param>
        </member>
        <member name="M:MW.Math.Mathematics.GreatestCommonDivisor(System.Int32,System.Int32)">
            <summary>The greatest common divisor of na and nb.</summary>
        </member>
        <member name="M:MW.Math.Mathematics.LowestCommonMultiple(System.Int32,System.Int32)">
            <summary>The lowest common multiple of na and nb.</summary>
        </member>
        <member name="M:MW.Math.Mathematics.Wrap(System.Single,System.Single,System.Single)">
            <summary>Wraps f between fMin and fMax.</summary>
            <param name="f">The float number to wrap.</param>
            <param name="fMin">The minimum value to wrap.</param>
            <param name="fMax">The maximum value to wrap.</param>
        </member>
        <member name="M:MW.Math.Mathematics.Wrap(System.Int32,System.Int32,System.Int32)">
            <summary>Wraps n between nMin and nMax.</summary>
            <param name="n">The float number to wrap.</param>
            <param name="nMin">The minimum value to wrap.</param>
            <param name="nMax">The maximum value to wrap.</param>
        </member>
        <member name="M:MW.Math.Mathematics.Parallel(MW.Vector.MVector,MW.Vector.MVector,System.Single)">
            <summary>Whether v1 is parallel to v2 within fParallelThreshold.</summary>
            <param name="v1">Whether this vector is parallel to the other.</param>
            <param name="v2">Whether this vector is parallel to the other.</param>
            <param name="fParallelThreshold">The threshold to consider parallel vectors.</param>
        </member>
        <member name="M:MW.Math.Mathematics.IsNormalised(MW.Vector.MVector)">
            <summary>Whether vVector has been normalised.</summary>
            <param name="vVector">The vector to check.</param>
        </member>
        <member name="M:MW.Math.Mathematics.AngleFromVector3D(UnityEngine.Vector3)">
            <summary>The angle in degrees pointing towards vDirection using the X-Axis and Z-Axis. (For 3D space)</summary>
            <param name="vDirection">The direction to calculate an angle towards.</param>
        </member>
        <member name="M:MW.Math.Mathematics.AngleFromVector2D(UnityEngine.Vector3)">
            <summary>The angle in degrees pointing towards vDirection using the X-Axis and Y-Axis. (For 2D space)</summary>
            <param name="vDirection">The direction to calculate an angle towards.</param>
        </member>
        <member name="M:MW.Math.Mathematics.VectorFromAngle(System.Single,MW.EDirection)">
            <summary>Returns a normalised <see cref="T:MW.Vector.MVector"/> at fDegrees, relative to dirForward.</summary>
            <param name="fDegrees">The angle offset.</param>
            <param name="dirForward">The forward direction.</param>
        </member>
        <member name="M:MW.Math.Mathematics.SinCos(System.Single@,System.Single@,System.Single)">
            <summary>The 11-Degree Minimax Approximation Sine and 10-Degree Minimax Approximation Cosine over an angle.</summary>
            <param name="fSine">The Sine result over fValue.</param>
            <param name="fCosine">The Cosine result over fValue.</param>
            <param name="fValue">The angle.</param>
        </member>
        <member name="P:MW.Vector.MVector.YZ">
            <summary>A new MVector ignoring the X component.</summary>
        </member>
        <member name="P:MW.Vector.MVector.XZ">
            <summary>A new MVector ignoring the Y component.</summary>
        </member>
        <member name="P:MW.Vector.MVector.XY">
            <summary>A new MVector ignoring the Z component.</summary>
        </member>
        <member name="M:MW.Vector.MVector.#ctor(System.Single)">
            <summary>Construct all components to U.</summary>
        </member>
        <member name="M:MW.Vector.MVector.#ctor(System.Single,System.Single)">
            <summary>Construct with X and Y components only.</summary>
        </member>
        <member name="M:MW.Vector.MVector.#ctor(System.Single,System.Single,System.Single)">
            <summary>Construct an MVector with X, Y, and Z components.</summary>
        </member>
        <member name="M:MW.Vector.MVector.#ctor(UnityEngine.Vector3)">
            <summary>Construct an MVector with respect to a Vector3.</summary>
            <param name="xyz"></param>
        </member>
        <member name="F:MW.Vector.MVector.Zero">
            <summary>Short for writing MVector(0, 0, 0).</summary>
        </member>
        <member name="F:MW.Vector.MVector.Right">
            <summary>Short for writing MVector(1, 0, 0).</summary>
        </member>
        <member name="F:MW.Vector.MVector.Up">
            <summary>Short for writing MVector(0, 1, 0).</summary>
        </member>
        <member name="F:MW.Vector.MVector.Forward">
            <summary>Short for writing MVector(0, 0, 1).</summary>
        </member>
        <member name="M:MW.Vector.MVector.V3(MW.Vector.MVector)">
            <summary>Converts an <see cref="T:MW.Vector.MVector"/> to a <see cref="T:UnityEngine.Vector3"/>.</summary>
            <param name="mVector">The MVector to convert.</param>
        </member>
        <member name="M:MW.Vector.MVector.MV(UnityEngine.Vector3)">
            <summary>Converts a <see cref="T:UnityEngine.Vector3"/> to an <see cref="T:MW.Vector.MVector"/>.</summary>
            <param name="vVector">The Vector3 to convert.</param>
        </member>
        <member name="M:MW.Vector.MVector.Normalise(MW.Vector.MVector)">
            <summary>Normalises mVector.</summary>
        </member>
        <member name="M:MW.Vector.MVector.Cross(MW.Vector.MVector,MW.Vector.MVector)">
            <summary>The vector cross ^ product of left and right.</summary>
        </member>
        <member name="M:MW.Vector.MVector.Dot(MW.Vector.MVector,MW.Vector.MVector)">
            <summary>The vector dot | product of left and right.</summary>
        </member>
        <member name="M:MW.Vector.MVector.Parallel(MW.Vector.MVector,MW.Vector.MVector)">
            <summary>Whether left and right are <see cref="M:MW.Math.Mathematics.Parallel(MW.Vector.MVector,MW.Vector.MVector,System.Single)"/> to each other.</summary>
        </member>
        <member name="M:MW.Vector.MVector.MVectorFromAngle(System.Single,MW.EDirection)">
            <summary>A normalised MVector at fDegrees, relative to dirForward.</summary>
            <param name="fDegrees">The angle offset.</param>
            <param name="dirForward">The forward direction.</param>
        </member>
        <member name="M:MW.Vector.MVector.Distance(MW.Vector.MVector,MW.Vector.MVector)">
            <summary>The distance between left and right.</summary>
        </member>
        <member name="P:MW.Vector.MVector.SqrMagnitude">
            <summary>The square magnitude of this MVector.</summary>
        </member>
        <member name="P:MW.Vector.MVector.Magnitude">
            <summary>The magnitude of this MVector.</summary>
        </member>
        <member name="P:MW.Vector.MVector.Abs">
            <summary>The <see cref="M:UnityEngine.Mathf.Abs(System.Single)"/> of this MVector's components.</summary>
        </member>
        <member name="P:MW.Vector.MVector.Normalised">
            <summary>The normalised version of this MVector.</summary>
        </member>
        <member name="M:MW.Vector.MVector.Normalise">
            <summary>Normalises this MVector.</summary>
        </member>
        <member name="M:MW.Vector.MVector.Set(System.Single,System.Single,System.Single)">
            <summary>Sets this MVector's components.</summary>
        </member>
        <member name="M:MW.Vector.MVector.IsNormalised">
            <summary>Whether this MVector is a unit vector. (If this MVector is <see cref="M:MW.Math.Mathematics.IsNormalised(MW.Vector.MVector)"/>)</summary>
            <returns></returns>
        </member>
        <member name="M:MW.Vector.MVector.Mirror(MW.Vector.MVector)">
            <summary>This MVector's reflection among mNormal.</summary>
            <param name="mNormal">The normal vector to mirror.</param>
        </member>
        <member name="M:MW.Vector.MVector.RotateAngleAxis(System.Single,MW.Vector.MVector)">
            <summary>Rotates this MVector at an angle of fAngleDegrees around mAxis.</summary>
            <param name="fAngleDegrees">The degrees at which to rotate this MVector.</param>
            <param name="mAxis">The axis to rotate this MVector around.</param>
        </member>
        <member name="M:MW.Vector.MVector.DirectionAndLength(MW.Vector.MVector@,System.Single@)">
            <summary>The direction and length of this MVector.</summary>
        </member>
        <member name="M:MW.Vector.MVector.Projection">
            <summary>This MVector's projection.</summary>
        </member>
        <member name="M:MW.Vector.MVector.Rotation">
            <summary>The <see cref="T:UnityEngine.Quaternion"/> this MVector represents.</summary>
        </member>
        <member name="M:MW.Vector.MVector.IgnoreX">
            <summary>Ignores the X component of this MVector.</summary>
        </member>
        <member name="M:MW.Vector.MVector.IgnoreY">
            <summary>Ignores the Y component of this MVector.</summary>
        </member>
        <member name="M:MW.Vector.MVector.IgnoreZ">
            <summary>Ignores the Z component of this MVector.</summary>
        </member>
        <member name="M:MW.Vector.MVector.op_ExclusiveOr(MW.Vector.MVector,MW.Vector.MVector)">
            <summary>The vector cross ^ product.</summary>
        </member>
        <member name="M:MW.Vector.MVector.op_BitwiseOr(MW.Vector.MVector,MW.Vector.MVector)">
            <summary>The vector dot | product.</summary>
        </member>
        <member name="M:MW.Vector.MVector.op_GreaterThan(MW.Vector.MVector,MW.Vector.MVector)">
            <summary><see cref="P:MW.Vector.MVector.Normalised"/> direction from to.</summary>
        </member>
        <member name="M:MW.Vector.MVector.op_LessThan(MW.Vector.MVector,MW.Vector.MVector)">
            <summary><see cref="P:MW.Vector.MVector.Normalised"/> direction from to.</summary>
        </member>
        <member name="M:MW.Vector.MVector.op_Implicit(MW.Vector.MVector)~UnityEngine.Color">
            <summary>The <see cref="T:UnityEngine.Color"/> representation of this MVector, in 0-255 XYZ/RGB.</summary>
        </member>
        <member name="T:MW.MArray`1">
            <summary>A dynamic generic array built off of System.Collections.Generic.List.</summary>
            <typeparam name="T">The generic type.</typeparam>
        </member>
        <member name="P:MW.MArray`1.Num">
            <summary>The number of T in this MArray; the size.</summary>
        </member>
        <member name="M:MW.MArray`1.#ctor">
            <summary>Initialises an MArray with the default settings.</summary>
        </member>
        <member name="M:MW.MArray`1.#ctor(System.Int32)">
            <summary>Initialises an MArray with an initial capacity.</summary>
            <param name="InitialSize">The number of elements this MArray will begin with.</param>
        </member>
        <member name="M:MW.MArray`1.Push(`0)">
            <summary>Adds Item.</summary>
            <param name="Item">The unique element to add.</param>
            <returns>If Pushing Item was successful. True if Item does not already exist in this MArray.</returns>
        </member>
        <member name="M:MW.MArray`1.Push(`0[])">
            <summary>Adds Range of items.</summary>
            <param name="Range">The list of elements to add.</param>
            <returns>An MArray of <see cref="T:MW.PushRangeFailed`1"/> that failed to be pushed into this MArray.</returns>
        </member>
        <member name="M:MW.MArray`1.Pull(`0)">
            <summary>Removes Item.</summary>
            <param name="Item">The element to remove.</param>
            <returns>The new size of this MArray.</returns>
        </member>
        <member name="M:MW.MArray`1.Random">
            <summary>Any element.</summary>
            <returns>Any random element.</returns>
        </member>
        <member name="M:MW.MArray`1.First">
            <returns>The item at the front of the queue.</returns>
        </member>
        <member name="M:MW.MArray`1.FirstPop">
            <summary>Pops the item at the front of the queue.</summary>
            <returns>The item that was at the front of the queue.</returns>
        </member>
        <member name="M:MW.MArray`1.Top">
            <returns>The item at the top of the stack.</returns>
        </member>
        <member name="M:MW.MArray`1.TopPop">
            <summary>Pops the item at the top of the stack.</summary>
            <returns>The item at the top of the stack.</returns>
        </member>
        <member name="M:MW.MArray`1.InRange(System.Int32)">
            <summary>Whether or not Index is within range.</summary>
            <param name="Index">The Index to check for range.</param>
            <returns>If Index is greater than or equal to zero and less than the number of elements.</returns>
        </member>
        <member name="M:MW.MArray`1.Contains(`0)">
            <param name="Item">Item to check for existence.</param>
            <returns>Whether the HashCode of Item exists within the internal <see cref="F:MW.MArray`1.HashMap"/>.</returns>
        </member>
        <member name="M:MW.MArray`1.Flush">
            <summary>Clears this MArray.</summary>
        </member>
        <member name="M:MW.MArray`1.IsEmpty">
            <returns>If this MArray is considered empty; Num == 0.</returns>
        </member>
        <member name="M:MW.MArray`1.Mirror(System.Int32)">
            <returns>The mirror position of index over minimum zero, maximum <see cref="P:MW.MArray`1.Num"/>.</returns>
        </member>
        <member name="M:MW.MArray`1.Mirror(System.Int32,System.Int32)">
            <returns>The mirror position of index over Minimum to maximum <see cref="P:MW.MArray`1.Num"/>.</returns>
        </member>
        <member name="M:MW.MArray`1.Reflect(System.Int32)">
            <summary>The incoming and reflected Item of this mirror from zero to maximum <see cref="P:MW.MArray`1.Num"/>.</summary>
            <returns><see cref="T:MW.MArray`1.Reflected"/></returns>
        </member>
        <member name="M:MW.MArray`1.Reflect(System.Int32,System.Int32)">
            <summary>The incoming and reflected Item of this mirror from Minimum to maximum <see cref="P:MW.MArray`1.Num"/>.</summary>
            <returns><see cref="T:MW.MArray`1.Reflected"/></returns>
        </member>
        <member name="T:MW.MArray`1.Reflected">
            <summary>The incoming and reflected Item of this mirror over the provided Minimum and Maximum <see cref="P:MW.MArray`1.Num"/>.</summary>
        </member>
        <member name="F:MW.MArray`1.Reflected.Source">
            <summary>In reflection.</summary>
        </member>
        <member name="F:MW.MArray`1.Reflected.Reflection">
            <summary>Out reflection.</summary>
        </member>
        <member name="M:MW.MArray`1.Reflect(System.Int32,System.Int32,`0@,`0@)">
            <returns>Outs the incoming and reflected Item of this mirror of Minimum, maximum <see cref="P:MW.MArray`1.Num"/>.</returns>
        </member>
        <member name="P:MW.MArray`1.Item(System.Int32)">
            <summary>Square bracket accessor.</summary>
            <param name="i">The index to access T item.</param>
            <returns>The Item at the specified index.</returns>
        </member>
        <member name="M:MW.MArray`1.CheckNull(MW.MArray{`0})">
            <param name="Check">The MArray to check for initialisation.</param>
            <returns>True if Check is null.</returns>
        </member>
        <member name="M:MW.MArray`1.op_LogicalNot(MW.MArray{`0})">
            <summary>If this MArray is null or <see cref="M:MW.MArray`1.IsEmpty"/>.</summary>
            <param name="CheckIfNullOrEmpty">The MArray to check for null or emptiness.</param>
            <returns>True if CheckIfNullOrEmpty is null or empty.</returns>
        </member>
        <member name="M:MW.MArray`1.op_Addition(MW.MArray{`0},MW.MArray{`0})">
            <summary>Adds Right to the end of Left.</summary>
            <param name="Left">The MArray to append to.</param>
            <param name="Right">The MArray to append to Left.</param>
            <returns>A contiguous MArray from Left to Right.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MW.MArray`1.op_BitwiseAnd(MW.MArray{`0},MW.MArray{`0})">
            <summary>Left elements that exist in Right.</summary>
            <param name="Left">The MArray to check AND.</param>
            <param name="Right">The MArray to compare to.</param>
            <returns>An MArray of Left elements that also exist in Right.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MW.MArray`1.op_ExclusiveOr(MW.MArray{`0},MW.MArray{`0})">
            <summary>Left elements that do not exist in Right.</summary>
            <param name="Left">The MArray to check OR.</param>
            <param name="Right">The MArray to compare to.</param>
            <returns>An MArray of Left's elements that do not exist in Right.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:MW.TPair`2">
            <summary>Generates a new pair of two types of values.</summary>
            <typeparam name="TFirst">The type of the first variable to store.</typeparam>
            <typeparam name="TSecond">The type of the second variable to store.</typeparam>
        </member>
        <member name="T:MW.TTriple`3">
            <summary>Generates a new variable of three types of values.</summary>
            <typeparam name="TFirst">The type of the first variable to store.</typeparam>
            <typeparam name="TSecond">The type of the second variable to store.</typeparam>
            <typeparam name="TThird">The type of the third variable to store.</typeparam>
        </member>
        <member name="F:MW.Utils.kThousandth">
            <summary>Shorthand for writing / 1000. (Always faster to multiply than to divide)</summary>
        </member>
        <member name="F:MW.Utils.kHundreth">
            <summary>Shorthand for writing / 100. (Always faster to multiply than to divide)</summary>
        </member>
        <member name="F:MW.Utils.k10Percent">
            <summary>Shorthand for writing / 10. (Always faster to multiply than to divide)</summary>
        </member>
        <member name="F:MW.Utils.kQuarter">
            <summary>Shorthand for writing / 4. (Always faster to multiply than to divide)</summary>
        </member>
        <member name="F:MW.Utils.kHalf">
            <summary>Shorthand for writing / 2. (Always faster to multiply than to divide)</summary>
        </member>
        <member name="F:MW.Utils.kOneThird">
            <summary>Shorthand for writing / 3. (Always faster to multiply than to divide)</summary>
        </member>
        <member name="F:MW.Utils.kTwoThirds">
            <summary>Shorthand for writing 1.6 recurring. (Always faster to multiply than to divide)</summary>
        </member>
        <member name="F:MW.Utils.kPhi">
            <summary>The golden ratio.</summary>
        </member>
        <member name="F:MW.Utils.kE">
            <summary>Euler's number. (e)</summary>
        </member>
        <member name="F:MW.Utils.kSqrt2">
            <summary>Shorthand for writing UnityEngine.Mathf.Sqrt(2). (Always faster to multiply than to divide)</summary>
        </member>
        <member name="F:MW.Utils.kSqrt3">
            <summary>Shorthand for writing UnityEngine.Mathf.Sqrt(3). (Always faster to multiply than to divide)</summary>
        </member>
        <member name="F:MW.Utils.kInversePI">
            <summary>Shorthand for writing 1 / <see cref="F:UnityEngine.Mathf.PI"/>.</summary>
        </member>
        <member name="F:MW.Utils.kHalfPI">
            <summary>Shorthand for writing <see cref="F:UnityEngine.Mathf.PI"/> * <see cref="F:MW.Utils.kHalf"/>.</summary>
        </member>
        <member name="F:MW.Utils.k1To255RGB">
            <summary>The ratio between 1 and 255.</summary>
        </member>
        <member name="M:MW.Utils.InFOV(MW.EDirection,UnityEngine.Transform,UnityEngine.Transform,System.Single)">
            <summary>If self can see <see cref="T:UnityEngine.Transform"/> target within SearchAngle degrees while facing <see cref="T:MW.EDirection"/>.</summary>
            <param name="dirFace">The <see cref="T:MW.EDirection"/> self is facing.</param>
            <param name="ASelf">The <see cref="T:UnityEngine.Transform"/> searching for target.</param>
            <param name="ATarget">The <see cref="T:UnityEngine.Transform"/> to look out for.</param>
            <param name="fSearchAngle">The maximum degrees to search for target.</param>
        </member>
        <member name="M:MW.Utils.InFOV(MW.EDirection,UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
            <summary>If self can see <see cref="T:UnityEngine.Transform"/> target within SearchAngle degrees while facing <see cref="T:MW.EDirection"/>.</summary>
            <param name="dirFace">The <see cref="T:MW.EDirection"/> self is facing.</param>
            <param name="ASelf">The <see cref="T:UnityEngine.Transform"/> searching for target.</param>
            <param name="vTarget">The <see cref="T:UnityEngine.Vector3"/> position to look out for.</param>
            <param name="fSearchAngle">The maximum degrees to search for target.</param>
        </member>
        <member name="M:MW.Utils.LineOfSight(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.LayerMask)">
            <summary>If self has an unobstructed line of sight to to.</summary>
            <param name="vSelf">The <see cref="T:UnityEngine.Vector3"/> position to look from.</param>
            <param name="vTo">The <see cref="T:UnityEngine.Vector3"/> position to look to.</param>
            <param name="lmObstacles">The <see cref="T:UnityEngine.LayerMask"/> obstacles to consider obtrusive.</param>
        </member>
        <member name="M:MW.Utils.LineOfSight(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>If <see cref="T:UnityEngine.Vector3"/> self has an unobstructed line of sight to to.</summary>
            <param name="vSelf">The <see cref="T:UnityEngine.Vector3"/> position to look from.</param>
            <param name="vTo">The <see cref="T:UnityEngine.Vector3"/> position to look to.</param>
        </member>
        <member name="M:MW.Utils.RoundToDP(System.Single,System.Int32)">
            <summary>The fValue rounded to dp decimal places.</summary>
             <param name="fValue">The value to be rounded.</param>
             <param name="nDP">The decimal places to be included.</param>
        </member>
        <member name="M:MW.Utils.FlipFlop(System.Boolean@)">
            <summary>Flip-Flops Bool.</summary>
            <param name="bBool"></param>
        </member>
        <member name="M:MW.Utils.FlipFlop(System.Boolean@,System.Action,System.Action)">
            <summary>Flip-Flops Bool.</summary>
            <param name="bBool"></param>
            <param name="ACallbackTrue">The method to call if the flip-flop is true.</param>
            <param name="ACallbackFalse">The method to call if the flip-flop is false.</param>
        </member>
        <member name="M:MW.Utils.IsWithin(System.Single,System.Single,System.Single)">
            <summary>If value is within the +- limit of from.</summary>
            <param name="fValue">The value to check.</param>
            <param name="fFrom">The value to compare.</param>
            <param name="fLimit">The limits to consider.</param>
        </member>
        <member name="M:MW.Utils.Max(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>The largest <see cref="T:UnityEngine.Vector3"/> between L and R, according to <see cref="P:UnityEngine.Vector3.magnitude"/>.</summary>
            <param name="vL"></param>
            <param name="vR"></param>
        </member>
        <member name="M:MW.Utils.Min(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>The smallest <see cref="T:UnityEngine.Vector3"/> between L and R, according to <see cref="P:UnityEngine.Vector3.magnitude"/>.</summary>
            <param name="vL"></param>
            <param name="vR"></param>
        </member>
        <member name="M:MW.Utils.Fibonacci(System.Int32)">
            <summary>Returns the n'th Fibonacci number.</summary>
            <param name="n"></param>
        </member>
        <member name="M:MW.Utils.GenerateEqualSphere(System.Int32,System.Single)">
            <summary>Generates spherical points with an equal distribution.</summary>
            <param name="nResolution">The number of points to generate.</param>
            <param name="fGoldenRationModifier">Adjusts the golden ratio.</param>
            <returns>The <see cref="T:UnityEngine.Vector3"/>[] points for the sphere.</returns>
        </member>
        <member name="M:MW.Utils.Bridge(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Single)">
            <summary>Generates the points to 'bridge' origin and target together at a height as an arc.</summary>
            <param name="vOrigin">The <see cref="T:UnityEngine.Vector3"/> starting point of the bridge.</param>
            <param name="vTarget">The <see cref="T:UnityEngine.Vector3"/> ending point of the bridge.</param>
            <param name="nResolution">The number of points for the bridge.</param>
            <param name="fHeight">The maximum height of the bridge.</param>
            <returns>The <see cref="T:UnityEngine.Vector3"/>[] points for the bridge.</returns>
        </member>
        <member name="M:MW.Utils.MirrorNumber(System.Single,System.Single,System.Single)">
            <summary>Mirrors Number about Minimum and Maximum, inclusive.</summary>
            <param name="Number">The number to anchor a reflection.</param>
            <param name="Minimum">The minimum number that can be reflected.</param>
            <param name="Maximum">The maximum number that can be reflected.</param>
            <returns>The reflected number.</returns>
        </member>
        <member name="M:MW.Utils.MirrorNumber(System.Int32,System.Int32,System.Int32)">
            <summary>Mirrors Number about Minimum and Maximum, inclusive. Not to be confused with <see cref="M:MW.MArray`1.Mirror(System.Int32,System.Int32)"/>.</summary>
            <param name="Number">The number to anchor a reflection.</param>
            <param name="Minimum">The minimum number that can be reflected.</param>
            <param name="Maximum">The maximum number that can be reflected.</param>
            <returns>The reflected number.</returns>
        </member>
        <member name="T:MW.HUD.Line">
            <summary>Drawing <see cref="T:UnityEngine.LineRenderer"/>s in the game.</summary>
        </member>
        <member name="M:MW.HUD.Line.DrawLine(UnityEngine.LineRenderer,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,UnityEngine.Vector3,UnityEngine.Material,System.Boolean)">
            <summary>Draws a line from to to in StartColor to EndColor at LineWidth thickness with an offset at UseWorldSpace with NumberOfSegments.</summary>
            <param name="LRSelf">The LineRenderer of the GameObject calling this.</param>
            <param name="vFrom">The coordinates where the line will originate.</param>
            <param name="vTo">The coordinates where the line will end.</param>
            <param name="colStartColour">The starting colour gradient for this line.</param>
            <param name="colEndColour">The ending colour gradient for this line.</param>
            <param name="fLineWidth">The thickness of this line.</param>
            <param name="vOffset">The offset to place this line.</param>
            <param name="MMaterial">The material used to draw the line.</param>
            <param name="bUseWorldSpace">Should this line use world space?</param>
        </member>
        <member name="M:MW.HUD.Line.DrawLine(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,UnityEngine.Vector3,System.Boolean)">
            <summary>Draws a line from to to in StartColor to EndColor at LineWidth thickness with an offset at UseWorldSpace with NumberOfSegments.</summary>
            <param name="GSelf">The GameObject calling this.</param>
            <param name="vFrom">The coordinates where the line will originate.</param>
            <param name="vTo">The coordinates where the line will end.</param>
            <param name="colStartColour">The starting colour gradient for this line.</param>
            <param name="colEndColour">The ending colour gradient for this line.</param>
            <param name="fLineWidth">The thickness of this line.</param>
            <param name="vOffset">The offset to place this line.</param>
            <param name="bUseWorldSpace">Should this line use world space?</param>
        </member>
        <member name="M:MW.HUD.Line.DrawCircle(UnityEngine.LineRenderer,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single,UnityEngine.Material,System.Boolean,System.Int32)">
            <summary>Draws a circle with a centre at around at radius with a LineColour at LineWidth thickness at UseWorldSpace with NumberOfSegments.</summary>
            <param name="LRSelf">The LineRenderer of the GameObject calling this.</param>
            <param name="vAround">The centre of the circle to be drawn.</param>
            <param name="fRadius">The radius of this circle.</param>
            <param name="colLineColour">The colour of this circle.</param>
            <param name="fLineWidth">The thickness of this circle.</param>
            <param name="MMaterial">The material used to draw the circle.</param>
            <param name="bUseWorldSpace">Should this circle use world space?</param>
            <param name="nNumberOfSegments">The number of verticies of this circle.</param>
        </member>
        <member name="M:MW.HUD.Line.DrawCircle(UnityEngine.GameObject,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single,System.Boolean,System.Int32)">
            <summary>Draws a circle with a centre at around at radius with a LineColour at LineWidth thickness at UseWorldSpace with NumberOfSegments.</summary>
            <param name="GSelf">The GameObject calling this.</param>
            <param name="vAround">The centre of the circle to be drawn.</param>
            <param name="fRadius">The radius of this circle.</param>
            <param name="colLineColour">The colour of this circle.</param>
            <param name="fLineWidth">The thickness of this circle.</param>
            <param name="bUseWorldSpace">Should this circle use world space?</param>
            <param name="nNumberOfSegments">The number of verticies of this circle.</param>
        </member>
        <member name="T:MW.HUD.UI">
            <summary>World space <see cref="T:UnityEngine.Canvas"/> scaling and <see cref="T:TMPro.TextMeshProUGUI"/> utilities.</summary>
        </member>
        <member name="F:MW.HUD.UI.ETypewriterMode.Append">
            <summary>Append to the current <see cref="T:TMPro.TextMeshProUGUI"/>.</summary>
        </member>
        <member name="F:MW.HUD.UI.ETypewriterMode.Clear">
            <summary>Clear the current <see cref="T:TMPro.TextMeshProUGUI"/> before typewriting.</summary>
        </member>
        <member name="M:MW.HUD.UI.ScaleSize(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Scales the canvas element relative to self.</summary>
            <param name="vSelf">The position to scale from.</param>
            <param name="vScaleWith">The position to scale with.</param>
            <returns>The relative scale size in Vector2.</returns>
        </member>
        <member name="M:MW.HUD.UI.Typewrite(TMPro.TextMeshProUGUI,UnityEngine.MonoBehaviour,System.String,System.Single,MW.HUD.UI.ETypewriterMode)">
            <summary>Animates a <see cref="T:TMPro.TextMeshProUGUI"/> to display Content like a typewriter.</summary>
            <remarks>This is an extension function on <see cref="T:TMPro.TextMeshProUGUI"/>.</remarks>
            <param name="TMPro">The extended <see cref="T:TMPro.TextMeshProUGUI"/> <see cref="T:UnityEngine.GameObject"/>.</param>
            <param name="Game">The <see cref="T:UnityEngine.MonoBehaviour"/> that will be responsible for invoking the Typewriter coroutine.</param>
            <param name="Content">The content to typewrite.</param>
            <param name="Delay">The time gap between writing a new character.</param>
            <param name="EMode">Should the text <see cref="F:MW.HUD.UI.ETypewriterMode.Append"/>, or <see cref="F:MW.HUD.UI.ETypewriterMode.Clear"/>?</param>
            <returns>The instance of the Typewriter coroutine.</returns>
        </member>
        <member name="M:MW.HUD.UI.Typewrite(TMPro.TextMeshProUGUI,UnityEngine.MonoBehaviour,System.String,System.Single,MW.HUD.UI.ETypewriterMode,System.String,System.Boolean)">
            <inheritdoc cref="M:MW.HUD.UI.Typewrite(TMPro.TextMeshProUGUI,UnityEngine.MonoBehaviour,System.String,System.Single,MW.HUD.UI.ETypewriterMode)"/>
            <param name="TMPro"></param> <param name="Game"></param> <param name="Content"></param> <param name="Delay"></param> <param name="EMode"></param>
            <param name="Sound">The <see cref="T:MW.Audio.MSound"/> in <see cref="F:MW.Audio.MAudio._AudioInstance"/> to play when writing a character.</param>
            <param name="bOverlapSound"></param>
        </member>
        <member name="M:MW.HUD.UI.TypewriterText(TMPro.TextMeshProUGUI,System.String,System.Single,MW.HUD.UI.ETypewriterMode)">
            <summary>Animates a <see cref="T:TMPro.TextMeshProUGUI"/> to display Content like a typewriter.</summary>
            <param name="TMPro">The text to animate.</param>
            <param name="Content">The content to typewrite.</param>
            <param name="Delay">The time gap between writing a new character.</param>
            <param name="EMode">Should the text <see cref="F:MW.HUD.UI.ETypewriterMode.Append"/>, or <see cref="F:MW.HUD.UI.ETypewriterMode.Clear"/>?</param>
        </member>
        <member name="M:MW.HUD.UI.TypewriterText(TMPro.TextMeshProUGUI,System.String,System.Single,MW.HUD.UI.ETypewriterMode,System.String,System.Boolean)">
            <summary>Animates a <see cref="T:TMPro.TextMeshProUGUI"/> to display Content like a typewriter.</summary>
            <param name="TMPro">The text to animate.</param>
            <param name="Content">The content to typewrite.</param>
            <param name="Delay">The time gap between writing a new character.</param>
            <param name="EMode">Should the text <see cref="F:MW.HUD.UI.ETypewriterMode.Append"/>, or <see cref="F:MW.HUD.UI.ETypewriterMode.Clear"/>?</param>
            <param name="Sound">The <see cref="T:MW.Audio.MSound"/> in <see cref="F:MW.Audio.MAudio._AudioInstance"/> to play when writing a character.</param>
            <param name="bOverlapSound"></param>
        </member>
    </members>
</doc>
